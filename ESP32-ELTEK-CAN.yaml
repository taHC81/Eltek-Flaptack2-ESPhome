esphome:
  name: esp32-eltek-can

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

api:
ota:
logger:
  
globals:
  - id: temp_inlet
    type: int
    restore_value: no
    initial_value: '0'
  - id: temp_outlet
    type: int
    restore_value: no
    initial_value: '0'
  - id: voltage_input
    type: int
    restore_value: no
    initial_value: '0'
  - id: voltage_output
    type: float
    restore_value: no
    initial_value: '0'
  - id: current_output
    type: float
    restore_value: no
    initial_value: '0'
  - id: serial_number
    type: uint8_t[6]
  - id: current_limiting
    type: bool
    initial_value: 'false'

web_server:
  port: 80

canbus:
  - platform: esp32_can
    rx_pin: GPIO18
    tx_pin: GPIO19
    can_id: 1
    id: eltek
    use_extended_id: true
    bit_rate: 125kbps
    on_frame:
      - can_id: 0x5002038   # serial number anounce message, populate serial_number array
        use_extended_id: true
        then:
        - lambda: |-
            id(serial_number)[0] = x[1];
            id(serial_number)[1] = x[2];
            id(serial_number)[2] = x[3];
            id(serial_number)[3] = x[4];
            id(serial_number)[4] = x[5];
            id(serial_number)[5] = x[6];
            ESP_LOGI("main", "Serial number updated!");
        - canbus.send:     # send login message
            use_extended_id: true
            can_id: 0x05004804
            canbus_id: eltek
            data: !lambda |-
              return { id(serial_number)[0], id(serial_number)[1], id(serial_number)[2], id(serial_number)[3], id(serial_number)[4], id(serial_number)[5], 0x00, 0x00 };
        - canbus.send:     # send parameters message
            use_extended_id: true
            can_id: 0x05FF4004
            canbus_id: eltek
            data: !lambda |-
              uint8_t can_mesg[] = {0, 0, 0, 0, 0, 0, 0, 0};
              uint16_t eltek_i10 = id(eltek_current).state * 10.0;
              uint16_t eltek_u100 = id(eltek_voltage).state * 100.0;
              can_mesg[0] = eltek_i10 & 0xFF;
              can_mesg[1] = (eltek_i10 >> 8) & 0xFF;
              can_mesg[2] = eltek_u100 & 0xFF;
              can_mesg[3] = (eltek_u100 >> 8) & 0xFF;
              can_mesg[4] = eltek_u100 & 0xFF;
              can_mesg[5] = (eltek_u100 >> 8) & 0xFF;
              can_mesg[6] = 0x3E;
              can_mesg[7] = 0x17;
              return {can_mesg[0], can_mesg[1], can_mesg[2], can_mesg[3], can_mesg[4], can_mesg[5], can_mesg[6], can_mesg[7]};

      - can_id: 0x05014004  # short walk-in (read voltage, current, temperatures, not current limiting)
        use_extended_id: true
        then:
        - lambda: |-
            id(current_limiting) = false;
            id(temp_outlet) = x[7];
            id(voltage_input) = 256 * x[6] + x[5];
            id(voltage_output) = (256 * x[4] + x[3]) / 100.0;
            id(current_output) = (256 * x[2] + x[1]) / 10.0;
            if (id(current_output) > 100) id(current_output) = 0;
            id(temp_inlet) = x[0];
            ESP_LOGI("main", "Received CAN frame ID: 0x05014004");
            ESP_LOGI("main", "temp inlet = %d °C", id(temp_inlet));
            ESP_LOGI("main", "temp outlet = %d °C", id(temp_outlet));
            ESP_LOGI("main", "input voltage = %d V", id(voltage_input));
            ESP_LOGI("main", "output voltage = %.2f V", id(voltage_output));
            ESP_LOGI("main", "output current = %.1f A", id(current_output));

      - can_id: 0x05014008  # short walk-in (read voltage, current, temperatures, current limiting)
        use_extended_id: true
        then:
        - lambda: |-
            id(current_limiting) = true;
            id(temp_outlet) = x[7];
            id(voltage_input) = 256 * x[6] + x[5];
            id(voltage_output) = (256 * x[4] + x[3]) / 100.0;
            id(current_output) = (256 * x[2] + x[1]) / 10.0;
            if (id(current_output) > 100) id(current_output) = 0;
            id(temp_inlet) = x[0];
            ESP_LOGI("main", "Received CAN frame ID: 0x05014008");
            ESP_LOGI("main", "temp inlet = %d °C", id(temp_inlet));
            ESP_LOGI("main", "temp outlet = %d °C", id(temp_outlet));
            ESP_LOGI("main", "input voltage = %d V", id(voltage_input));
            ESP_LOGI("main", "output voltage = %.2f V", id(voltage_output));
            ESP_LOGI("main", "output current = %.1f A", id(current_output));

sensor:
  - platform: template
    id: eltek_temp_inlet
    name: "Eltek inlet temperature"
    device_class: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      return (id(temp_inlet));
  - platform: template
    id: eltek_temp_outlet
    name: "Eltek outlet temperature"
    device_class: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      return (id(temp_outlet));
  - platform: template
    id: eltek_voltage_input
    name: "Eltek voltage input"
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      return (id(voltage_input));
  - platform: template
    id: eltek_voltage_output
    name: "Eltek voltage output"
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      return (id(voltage_output));
  - platform: template
    id: eltek_cell_voltage
    name: "Eltek cell voltage (13S Li-ion)"
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      return (id(voltage_output) / 13);
  - platform: template
    id: eltek_current_output
    name: "Eltek current output"
    device_class: current
    unit_of_measurement: "A"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      return (id(current_output));
  - platform: template
    id: eltek_power_output
    name: "Eltek power output"
    device_class: power
    unit_of_measurement: "W"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      return (id(current_output) * id(voltage_output));

number:
  - platform: template
    id: eltek_voltage
    name: "Eltek FP2 voltage"
    device_class: voltage
    unit_of_measurement: "V"
    update_interval: 5s
    restore_value: true
    min_value: 44.50
    max_value: 57.60
    step: 0.1
    optimistic: true
    mode: box
          
  - platform: template
    id: eltek_current
    name: "Eltek FP2 current"
    device_class: current
    unit_of_measurement: "A"
    update_interval: 5s
    restore_value: true
    min_value: 0.10
    max_value: 41.70
    step: 0.1
    optimistic: true
    mode: box
 
switch:
  - platform: restart
    name: "ESPhome Eltek FP2 restart"

binary_sensor:
  - platform: template
    name: "Current limiting active"
    lambda: |-
      if (id(current_limiting)) {
        return true;
      } else {
        return false;
      }

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID

  - platform: template
    name: "Flatpack2 temperatures"
    lambda: |-
      char buf[200];
      sprintf(buf, "%.0f°C / %.0f°C", id(eltek_temp_inlet).state, id(eltek_temp_outlet).state);
      return (std::string) buf;
    update_interval: 1s
